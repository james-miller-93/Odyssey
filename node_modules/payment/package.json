{
  "_args": [
    [
      {
        "raw": "payment@^2.0.3",
        "scope": null,
        "escapedName": "payment",
        "name": "payment",
        "rawSpec": "^2.0.3",
        "spec": ">=2.0.3 <3.0.0",
        "type": "range"
      },
      "/Users/Roula/Odyssey/node_modules/react-native-credit-card"
    ]
  ],
  "_from": "payment@>=2.0.3 <3.0.0",
  "_id": "payment@2.3.0",
  "_inCache": true,
  "_location": "/payment",
  "_nodeVersion": "7.7.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/payment-2.3.0.tgz_1503272467458_0.7170742661692202"
  },
  "_npmUser": {
    "name": "jessepollak",
    "email": "jesse@pollak.io"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "payment@^2.0.3",
    "scope": null,
    "escapedName": "payment",
    "name": "payment",
    "rawSpec": "^2.0.3",
    "spec": ">=2.0.3 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-native-credit-card"
  ],
  "_resolved": "https://registry.npmjs.org/payment/-/payment-2.3.0.tgz",
  "_shasum": "b2a95e9c3052459647da3926b8b66c553d93098f",
  "_shrinkwrap": null,
  "_spec": "payment@^2.0.3",
  "_where": "/Users/Roula/Odyssey/node_modules/react-native-credit-card",
  "author": {
    "name": "Jesse Pollak"
  },
  "bugs": {
    "url": "https://github.com/jessepollak/payment/issues"
  },
  "dependencies": {
    "qj": "~2.0.0"
  },
  "description": "A general purpose library for building credit card forms, validating inputs and formatting numbers. Base on jquery.payment by @stripe, but without the jQuery.",
  "devDependencies": {
    "browserify": "~13.0.1",
    "coffee-loader": "^0.7.2",
    "coffee-script": "~1.10",
    "jsdom": "~9.2",
    "json-loader": "^0.5.4",
    "karma": "^0.13.22",
    "karma-chai": "^0.1.0",
    "karma-chai-plugins": "^0.7.0",
    "karma-chrome-launcher": "^0.2.3",
    "karma-coverage": "^0.5.5",
    "karma-mocha": "^0.2.2",
    "karma-phantomjs-launcher": "^1.0.0",
    "karma-sinon": "^1.0.4",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^1.7.0",
    "mocha": "~2.5",
    "mocha-webpack": "^0.4.0",
    "mversion": "^1.10.1",
    "nodemon": "~1.9.2",
    "phantomjs-prebuilt": "^2.1.7",
    "run-sequence": "~1.2.1",
    "tiny-lr": "0.2.1",
    "vinyl-source-stream": "~1.1.0",
    "webpack": "^1.13.1"
  },
  "directories": {},
  "dist": {
    "shasum": "b2a95e9c3052459647da3926b8b66c553d93098f",
    "tarball": "https://registry.npmjs.org/payment/-/payment-2.3.0.tgz"
  },
  "gitHead": "4a5360024d53ff9527cf4e913b41fecdb4a32c70",
  "homepage": "https://github.com/jessepollak/payment#readme",
  "keywords": [
    "payment",
    "cc",
    "card"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "jessepollak",
      "email": "jesse@pollak.io"
    }
  ],
  "name": "payment",
  "optionalDependencies": {},
  "readme": "# Payment [![Build Status](https://travis-ci.org/jessepollak/payment.svg?branch=master)](https://travis-ci.org/jessepollak/payment)\n\nA jQuery-free general purpose library for building credit card forms, validating inputs and formatting numbers. Heavily, heavily based on [@stripe's jquery.payment library](http://github.com/stripe/jquery.payment), but without the jQuery.\n\nFor example, you can make a input act like a credit card field (with number formatting and length restriction):\n\n``` javascript\nPayment.formatCardNumber(document.querySelector('input.cc-num'));\n```\n\nThen, when the payment form is submitted, you can validate the card number on the client-side:\n\n``` javascript\nvar valid = Payment.fns.validateCardNumber(document.querySelector('input.cc-num').value);\n\nif (!valid) {\n  alert('Your card is not valid!');\n  return false;\n}\n```\n\nYou can find a full [demo here](http://jessepollak.github.io/payment/example).\n\nSupported card types are:\n\n* Visa\n* MasterCard\n* American Express\n* Discover\n* JCB\n* Diners Club\n* Maestro\n* Laser\n* UnionPay\n* Elo\n* Hipercard\n\n## API\n\n### Payment.formatCardNumber(element[, maxLength])\nFormats card numbers:\n\n* Includes a space between every 4 digits\n* Restricts input to numbers\n* Limits to 16 numbers\n* Supports American Express formatting\n* Adds a class of the card type (e.g. 'visa') to the input\n* If second parameter is specified then card length will be limited to its value (19 digits cards are not in use despite being included in specifications)\n\nExample:\n\n``` javascript\nPayment.formatCardNumber(document.querySelector('input.cc-num'));\n```\n\n### Payment.formatCardExpiry(element)\n\nFormats card expiry:\n\n* Includes a `/` between the month and year\n* Restricts input to numbers\n* Restricts length\n\nExample:\n\n``` javascript\nPayment.formatCardExpiry(document.querySelector('input.cc-exp'));\n```\n\n### Payment.formatCardCVC(element)\nFormats card CVC:\n\n* Restricts length to 4 numbers\n* Restricts input to numbers\n\nExample:\n\n``` javascript\nPayment.formatCardCVC(document.querySelector('input.cc-cvc'));\n```\n\n### Payment.restrictNumeric(element)\n\nGeneral numeric input restriction.\n\nExample:\n\n``` javascript\nPayment.restrictNumeric(document.querySelector('[data-numeric]'));\n```\n\n### Payment.fns.validateCardNumber(number)\n\nValidates a card number:\n\n* Validates numbers\n* Validates Luhn algorithm\n* Validates length\n\nExample:\n\n``` javascript\nPayment.fns.validateCardNumber('4242 4242 4242 4242'); //=> true\n```\n\n### Payment.fns.validateCardExpiry(month, year), Payment.fns.validateCardExpiry('month / year')\n\nValidates a card expiry:\n\n* Validates numbers\n* Validates in the future\n* Supports year shorthand\n* Supports formatted as `formatCardExpiry` input value\n\nExample:\n\n``` javascript\nPayment.fns.validateCardExpiry('05', '20'); //=> true\nPayment.fns.validateCardExpiry('05', '2015'); //=> true\nPayment.fns.validateCardExpiry('05', '05'); //=> false\nPayment.fns.validateCardExpiry('05 / 25'); //=> true\nPayment.fns.validateCardExpiry('05 / 2015'); //=> false\n```\n\n### Payment.fns.validateCardCVC(cvc, type)\n\nValidates a card CVC:\n\n* Validates number\n* Validates length to 4\n\nExample:\n\n``` javascript\nPayment.fns.validateCardCVC('123'); //=> true\nPayment.fns.validateCardCVC('123', 'amex'); //=> true\nPayment.fns.validateCardCVC('1234', 'amex'); //=> true\nPayment.fns.validateCardCVC('12344'); //=> false\n```\n\n### Payment.fns.cardType(number)\n\nReturns a card type. Either:\n\n* `visa`\n* `mastercard`\n* `discover`\n* `amex`\n* `jcb`\n* `dinersclub`\n* `maestro`\n* `laser`\n* `unionpay`\n* `elo`\n* `hipercard`\n\nThe function will return `null` if the card type can't be determined.\n\nExample:\n\n``` javascript\nPayment.fns.cardType('4242 4242 4242 4242'); //=> 'visa'\n```\n\n### Payment.fns.cardExpiryVal(string) and Payment.cardExpiryVal(el)\n\nParses a credit card expiry in the form of MM/YYYY, returning an object containing the `month` and `year`. Shorthand years, such as `13` are also supported (and converted into the longhand, e.g. `2013`).\n\n``` javascript\nPayment.fns.cardExpiryVal('03 / 2025'); //=> {month: 3: year: 2025}\nPayment.fns.cardExpiryVal('05 / 04'); //=> {month: 5, year: 2004}\nPayment.fns.cardExpiryVal(document.querySelector('input.cc-exp')) //=> {month: 4, year: 2020}\n```\n\nThis function doesn't perform any validation of the month or year; use `Payment.fns.validateCardExpiry(month, year)` for that.\n\n## Card Type functions\n\nWe've provided utility functions to change which card types can be identified by Payment.\n\n### Payment.getCardArray()\n\nReturns the array of card types.\n\n### Payment.setCardArray(cardTypes)\n\nOverrides the array of card types with a new array.\n\n### Payment.addToCardArray(cardType)\n\nAdd a new card type to the card array.\n\n### Payment.removeFromCardArray(cardName)\n\nRemove a card type from the card array.\n\n## Example\n\nLook in [`./example/index.html`](example/index.html)\n\n## Building\n\nRun `gulp build`\n\n## Running tests\n\nRun `gulp test`\n\n## Autocomplete recommendations\n\nWe recommend you turn autocomplete on for credit card forms, except for the CVC field. You can do this by setting the `autocomplete` attribute:\n\n``` html\n<form autocomplete=\"on\">\n  <input class=\"cc-number\">\n  <input class=\"cc-cvc\" autocomplete=\"off\">\n</form>\n```\n\nYou should also mark up your fields using the [Autofill spec](https://html.spec.whatwg.org/multipage/forms.html#autofill). These are respected by a number of browsers, including Chrome.\n\n``` html\n<input type=\"text\" class=\"cc-number\" pattern=\"\\d*\" autocompletetype=\"cc-number\" placeholder=\"Card number\" required>\n```\n\nSet `autocompletetype` to `cc-number` for credit card numbers, `cc-exp` for credit card expiry and `cc-csc` for the CVC (security code).\n\n## Mobile recommendations\n\nWe recommend you set the `pattern` attribute which will cause the numeric keyboard to be displayed on mobiles:\n\n``` html\n<input class=\"cc-number\" pattern=\"\\d*\">\n```\n\nYou may have to turn off HTML5 validation (using the `novalidate` form attribute) when using this `pattern`, as it won't match space formatting.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jessepollak/payment.git"
  },
  "scripts": {
    "build": "NODE_ENV=production webpack",
    "compile": "coffee -o lib/ --compile ./src/*.coffee",
    "development": "coffee -o lib/ --compile --watch ./src/*.coffee",
    "postpublish": "git push origin master && git push --tags",
    "prepublish": "NODE_ENV=production npm run compile",
    "preversion": "npm run test",
    "test": "karma start --single-run --browsers PhantomJS"
  },
  "version": "2.3.0"
}
