{"version":3,"sources":["../src/index.js"],"names":["blendNames","Object","keys","blendShaderCodes","shaderObjects","reduce","processed","name","formatted","frag","assign","shaders","create","ColorBlending","props","tex","children","color","blendMode","Component","propTypes","any","isRequired","array","string"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;;;;;AAEO,IAAMA,kCAAaC,OAAOC,IAAP,mBAAnB;AACA,IAAMC,+DAAN;;AAEP,IAAMC,gBAAgBJ,WAAWK,MAAX,CAAkB,UAACC,SAAD,EAAYC,IAAZ,EAAqB;AAC3D,MAAMC,gCACHD,IADG,EACI;AACNE,8CAOJ,kBAAYF,IAAZ,CAPI,EAWcA,IAXd;AADM,GADJ,CAAN;AAkBA,SAAON,OAAOS,MAAP,CAAc,EAAd,EAAkBJ,SAAlB,EAA6BE,SAA7B,CAAP;AACD,CApBqB,EAoBnB,EApBmB,CAAtB;;AAsBA,IAAMG,UAAU,iBAAQC,MAAR,CAAeR,aAAf,CAAhB;;IAEMS,a;;;;;;;;;;;6BAMK;AAAA,mBACkD,KAAKC,KADvD;AAAA,UACWC,GADX,UACCC,QADD;AAAA,UACgBC,KADhB,UACgBA,KADhB;AAAA,oCACuBC,SADvB;AAAA,UACuBA,SADvB,oCACmC,UADnC;;AAEP,aACE;AACE,gBAAQP,QAAQO,SAAR,CADV;AAEE,kBAAU,EAAEH,QAAF,EAAOE,YAAP;AAFZ,QADF;AAMD;;;;EAdyB,gBAAME,S;;AAA5BN,a,CACGO,S,GAAY;AACjBJ,YAAU,oBAAUK,GAAV,CAAcC,UADP;AAEjBL,SAAO,oBAAUM,KAFA;AAGjBL,aAAW,oBAAUM;AAHJ,C;kBAgBNX,a","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Shaders, Node, GLSL } from 'gl-react';\nimport shaderCodes from './shaders'\n\nexport const blendNames = Object.keys(shaderCodes);\nexport const blendShaderCodes = shaderCodes;\n\nconst shaderObjects = blendNames.reduce((processed, name) => {\n  const formatted = {\n    [name]: {\n      frag: GLSL`\nprecision highp float;\nvarying vec2 uv;\n\nuniform sampler2D tex;\nuniform vec4 color;\n\n${shaderCodes[name]}\n\nvoid main () {\n  vec4 baseColor = texture2D(tex, uv);\n  vec3 newColor = ${name}(baseColor.rgb, color.rgb, color.a);\n  gl_FragColor = vec4(newColor, 1.);\n}`\n    }\n  };\n  return Object.assign({}, processed, formatted);\n}, {});\n\nconst shaders = Shaders.create(shaderObjects);\n\nclass ColorBlending extends React.Component {\n  static propTypes = {\n    children: PropTypes.any.isRequired,\n    color: PropTypes.array,\n    blendMode: PropTypes.string,\n  };\n  render() {\n    const { children: tex, color, blendMode = 'blendAdd' } = this.props;\n    return (\n      <Node\n        shader={shaders[blendMode] }\n        uniforms={{ tex, color }}\n      />\n    );\n  }\n}\n\nexport default ColorBlending;"]}