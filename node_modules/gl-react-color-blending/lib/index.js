'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blendShaderCodes = exports.blendNames = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(['\nprecision highp float;\nvarying vec2 uv;\n\nuniform sampler2D tex;\nuniform vec4 color;\n\n', '\n\nvoid main () {\n  vec4 baseColor = texture2D(tex, uv);\n  vec3 newColor = ', '(baseColor.rgb, color.rgb, color.a);\n  gl_FragColor = vec4(newColor, 1.);\n}'], ['\nprecision highp float;\nvarying vec2 uv;\n\nuniform sampler2D tex;\nuniform vec4 color;\n\n', '\n\nvoid main () {\n  vec4 baseColor = texture2D(tex, uv);\n  vec3 newColor = ', '(baseColor.rgb, color.rgb, color.a);\n  gl_FragColor = vec4(newColor, 1.);\n}']);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _glReact = require('gl-react');

var _shaders = require('./shaders');

var _shaders2 = _interopRequireDefault(_shaders);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var blendNames = exports.blendNames = Object.keys(_shaders2.default);
var blendShaderCodes = exports.blendShaderCodes = _shaders2.default;

var shaderObjects = blendNames.reduce(function (processed, name) {
  var formatted = _defineProperty({}, name, {
    frag: (0, _glReact.GLSL)(_templateObject, _shaders2.default[name], name)
  });
  return Object.assign({}, processed, formatted);
}, {});

var shaders = _glReact.Shaders.create(shaderObjects);

var ColorBlending = function (_React$Component) {
  _inherits(ColorBlending, _React$Component);

  function ColorBlending() {
    _classCallCheck(this, ColorBlending);

    return _possibleConstructorReturn(this, (ColorBlending.__proto__ || Object.getPrototypeOf(ColorBlending)).apply(this, arguments));
  }

  _createClass(ColorBlending, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          tex = _props.children,
          color = _props.color,
          _props$blendMode = _props.blendMode,
          blendMode = _props$blendMode === undefined ? 'blendAdd' : _props$blendMode;

      return _react2.default.createElement(_glReact.Node, {
        shader: shaders[blendMode],
        uniforms: { tex: tex, color: color }
      });
    }
  }]);

  return ColorBlending;
}(_react2.default.Component);

ColorBlending.propTypes = {
  children: _propTypes2.default.any.isRequired,
  color: _propTypes2.default.array,
  blendMode: _propTypes2.default.string
};
exports.default = ColorBlending;
//# sourceMappingURL=index.js.map